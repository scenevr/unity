using UnityEngine;
using System.Xml;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.IO;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SceneVR
{
	public class Model : SceneVR.Element
	{
		public OBJ obj;

		public Model ()
		{
		}

		// fixme - fix in the obj loader
		/*new public Vector3 ParseScale(){
			Vector3 v = ParseVector ("scale", 1, 1, 1);
			v.z = -v.z;
            return v;
        }*/

		public IEnumerator LoadModel(){
			string path = ResolveUrl(node.Attributes["src"].Value);

			obj.objPath = path;
			obj.basepath = (path.IndexOf("/") == -1) ? "" : path.Substring(0, path.LastIndexOf("/") + 1);

			WWW loader = new WWW(path);
			yield return loader;

			Debug.Log("Loaded " + path);

			obj.SetGeometryData(loader.text);

			if ((node.Attributes["mtl"] != null) && (obj.hasMaterials)) {
				loader = new WWW(obj.basepath + obj.mtllib);
				//Debug.Log("base path = "+basepath);
				//Debug.Log("MTL path = "+(basepath + mtllib));
				yield return loader;
				if (loader.error != null) {
					Debug.LogError(loader.error);
				}
				else {
					obj.SetMaterialData(loader.text);
				}
				
				foreach(OBJ.MaterialData m in obj.materialData) {
					if(m.diffuseTexPath != null) {
						string texpath = ResolveUrl(m.diffuseTexPath);
						WWW texloader = obj.GetTextureLoader(m, texpath);
						yield return texloader;
						if (texloader.error != null) {
							Debug.LogError(texloader.error);
							Debug.Log (texpath);
						} else {
							m.diffuseTex = texloader.texture;
						}
					}
					if(m.bumpTexPath != null) {
						WWW texloader = obj.GetTextureLoader(m, ResolveUrl(m.bumpTexPath));
						yield return texloader;
						if (texloader.error != null) {
							Debug.LogError(texloader.error);
						} else {
							m.bumpTex = texloader.texture;
						}
					}
				}
			}

			Material mat;

			if (HasStyle("light-map")){
				mat = new Material(Shader.Find("Lightmap"));
				string url = GetUrlFromStyle("light-map");
				Debug.Log("Lightmap: " + url);
				WWW texloader = new WWW (ResolveUrl(url));
				yield return texloader;
				if (texloader.error != null) {
					Debug.LogError(texloader.error);
				} else {
					Debug.Log ("Loaded texture...");
					mat.SetTexture("_MainTex", texloader.texture);
				}
			} else { 
				Debug.Log("Setting default material for " + path);
				mat = GetMaterial();
			}

			Dictionary<string, Material> materials = new Dictionary<string, Material>();

			materials.Add("default", mat);

			if(obj.hasMaterials && obj.materialData != null) {
				foreach(OBJ.MaterialData md in obj.materialData) {
					if (materials.ContainsKey(md.name)) {
						continue;
					}
					materials.Add(md.name, obj.GetMaterial(md));
				}
			}

			// materials.Add("default", renderer.materials[0]);
			// new Material(Shader.Find("Specular"))
			// }

			GameObject[] ms = new GameObject[obj.buffer.numObjects];
			
			if(obj.buffer.numObjects == 1) {
				gameObject.AddComponent(typeof(MeshFilter));
				gameObject.AddComponent(typeof(MeshRenderer));
				ms[0] = gameObject;
			} else if(obj.buffer.numObjects > 1) {
				for(int i = 0; i < obj.buffer.numObjects; i++) {
					GameObject go = new GameObject();
					go.transform.parent = gameObject.transform;
					go.AddComponent(typeof(MeshFilter));
					go.AddComponent(typeof(MeshRenderer));
					ms[i] = go;
				}
			}
			
			obj.buffer.PopulateMeshes(ms, materials);

			Debug.Log("Populated mesh for " + path);

			SetCommonAttributes();
		}

		public static Model Create(XmlNode el){
			Model result = new Model();

			result.obj = new OBJ();
			result.gameObject = result.obj.gameObject;
			result.node = el;

			return result;
		}
	}
}


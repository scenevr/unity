using UnityEngine;
using System.Xml;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace SceneVR
{
	public class Element
	{
		public XmlNode node;
		public GameObject gameObject;
		public Connector connector;

		public Boolean HasGameObject(){
			return gameObject != null;
		}

		// Remove dead elements from the scene
		public void Remove(){
			if (HasGameObject()){
				UnityEngine.Object.Destroy(gameObject);
			}

			gameObject = null;
			node = null;
		}
			
		public Boolean SubstantialDifference(XmlNode otherNode){
			// todo...
			return false;
		}

		public void RegenerateFrom(XmlNode el){
			node = el;
			// Todo...
        }
        public Vector3 ParseVector(String attributeName, float x, float y, float z){
			if(node.Attributes[attributeName] != null){
				String[] vector = node.Attributes[attributeName].Value.Split (' ');
				return new Vector3 (float.Parse (vector [0]), float.Parse (vector [1]), -float.Parse (vector [2]));
			} else {
				return new Vector3(x,y,z);
			}
		}
		
		public Quaternion ParseQuaternion(String attributeName){
			Vector3 vector = ParseVector(attributeName,0,0,0) * (float) (180.0 / Math.PI);

            Debug.Log(vector);

			return Quaternion.Euler(new Vector3(-vector.x, 0, 0)) *
				Quaternion.Euler(new Vector3(0, -vector.y, 0)) *
				Quaternion.Euler(new Vector3(0, 0, -vector.z));
		}

		protected Color ParseColor(string color)
		{
			if(color.Substring(0,1) == "#"){
				return HexToColor(color);
			}else {
				// todo: support html color names
				return new Color(1,0,1,1);
			}
		}

		private Color HexToColor(string hex)
		{
			byte r=255;
			byte g=0;
			byte b=255;

			if (hex.Length == 7) {
				r = byte.Parse(hex.Substring(1,2), System.Globalization.NumberStyles.HexNumber);
				g = byte.Parse(hex.Substring(3,2), System.Globalization.NumberStyles.HexNumber);
				b = byte.Parse(hex.Substring(5,2), System.Globalization.NumberStyles.HexNumber);
			} else if (hex.Length == 4) {
				r = (byte) (byte.Parse(hex.Substring(1,1), System.Globalization.NumberStyles.HexNumber) * 16);
				g = (byte) (byte.Parse(hex.Substring(2,1), System.Globalization.NumberStyles.HexNumber) * 16);
				b = (byte) (byte.Parse(hex.Substring(3,1), System.Globalization.NumberStyles.HexNumber) * 16);
			}
				
			return new Color32(r, g, b, 255);
		}
		
		public Vector3 ParsePosition(){
			Vector3 v = ParseVector ("position", 0, 0, 0);
			// v.z = -v.z;
			return v;
		}

		public virtual Vector3 ParseScale(){
			return ParseVector ("scale", 1, 1, 1);
        }
        
		public string ResolveUrl(string url){
			// fixme: create a URI object and use that
			return "http://" + connector.uri.Host + url;
			// return "http://chess.scenevr.hosting" + url;
			//return "http://scenevr-welcome.herokuapp.com" + url;
		}

		public void SetCommonAttributes(){
			SetPosition();
			SetScale();
			SetRotation();
			SetVisibility();
		}

		public void SetVisibility(){
			if (HasStyle("visibility")){
				gameObject.GetComponent<Renderer>().enabled = GetStyle("visibility") != "hidden";
			}
		}
				
		public virtual void SetPosition(){
			gameObject.transform.position = ParsePosition ();
		}

		public virtual void SetScale(){
			gameObject.transform.localScale = ParseScale ();
		}

		public virtual void SetRotation(){
			gameObject.transform.rotation = ParseQuaternion("rotation");
		}

		protected Material GetMaterial(){
			Material material = new Material (Shader.Find("Diffuse"));

			// Default color
			material.SetColor("_Color", Color.white);

			if (StyleMap().ContainsKey("color")){
				material.SetColor("_Color", ParseColor(StyleMap()["color"]));
			}

			return material;
		}

		public void SetMaterial(){
			gameObject.GetComponent<Renderer>().material = GetMaterial();
		}

		protected Boolean HasStyle(string key){
			return StyleMap().ContainsKey(key);
		}

		protected string GetStyle(string key){
			return StyleMap()[key];
		}

		public Dictionary<String, String>StyleMap(){
			Dictionary<String, String>styleMap = new Dictionary<String, String>();

			if (node.Attributes["style"] != null) {
				foreach(String definition in node.Attributes["style"].Value.Split(new []{';'}, StringSplitOptions.RemoveEmptyEntries)){
					String[] pair = definition.Split(':');
					styleMap.Add(pair[0].Trim (), pair[1].Trim());
				}
			};

			return styleMap;
		}

		public string GetUrlFromStyle(string key){
			if(StyleMap ().ContainsKey(key)){
				string value = StyleMap ()[key];
				Regex r = new Regex(@"\((.+)\)");
				Match m = r.Match(value);
				return m.Groups[1].Value;
			} else {
				return null;
			}
		}
	}
}

